diff -r 9142266fbb25 src/csma/model/csma-net-device.cc
--- a/src/csma/model/csma-net-device.cc	Sat Jan 16 08:14:40 2016 -0800
+++ b/src/csma/model/csma-net-device.cc	Sat Apr 09 18:08:18 2016 -0300
@@ -792,6 +792,17 @@
       packetType = PACKET_OTHERHOST;
     }
 
+  //
+  // For all kinds of packetType we receive, we pass the original copy of the
+  // packet to the OpenFlow receive callback. Nothing more is supposed to
+  // happen when this device is configure as OpenFlow port, so we end here.
+  //
+  if (!m_openFlowRxCallback.IsNull ())
+    {
+      m_openFlowRxCallback (this, originalPacket, protocol, header.GetSource (), header.GetDestination (), packetType);
+      return;
+    }
+
   // 
   // For all kinds of packetType we receive, we hit the promiscuous sniffer
   // hook and pass a copy up to the promiscuous callback.  Pass a copy to 
@@ -1016,6 +1027,13 @@
 }
 
 void
+CsmaNetDevice::SetOpenFlowReceiveCallback (NetDevice::PromiscReceiveCallback cb)
+{
+  NS_LOG_FUNCTION (&cb);
+  m_openFlowRxCallback = cb;
+}
+
+void
 CsmaNetDevice::SetReceiveCallback (NetDevice::ReceiveCallback cb)
 {
   NS_LOG_FUNCTION (&cb);
diff -r 9142266fbb25 src/csma/model/csma-net-device.h
--- a/src/csma/model/csma-net-device.h	Sat Jan 16 08:14:40 2016 -0800
+++ b/src/csma/model/csma-net-device.h	Sat Apr 09 18:08:18 2016 -0300
@@ -307,6 +307,14 @@
   virtual bool NeedsArp (void) const;
 
   /**
+   * Set the callback to be used to notify the OpenFlow device when a packet
+   * has been received.
+   *
+   * \param cb The callback.
+   */
+  virtual void SetOpenFlowReceiveCallback (NetDevice::PromiscReceiveCallback cb);
+  
+  /**
    * Set the callback to be used to notify higher layers when a packet has been
    * received.
    *
@@ -689,6 +697,11 @@
   Mac48Address m_address;
 
   /**
+   * The callback used to notify OpenFlow device that a packet has been received.
+   */
+  NetDevice::PromiscReceiveCallback m_openFlowRxCallback;
+  
+  /**
    * The callback used to notify higher layers that a packet has been received.
    */
   NetDevice::ReceiveCallback m_rxCallback;
